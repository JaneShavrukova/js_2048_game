{"version":3,"sources":["modules/constants.js","modules/Game.class.js","scripts/main.js"],"names":["STATUS_IDLE","STATUS_PLAYING","STATUS_WIN","STATUS_LOSE","Direction","UP","DOWN","LEFT","RIGHT","module","exports","require","Game","initialState","createEmptyBoard","state","score","status","Array","from","length","fill","map","row","addRandomTile","emptyCells","forEach","r","rowIndex","c","colIndex","push","col","randomIndex","Math","floor","random","newTileValue","nonZeroRow","filter","cell","mergedRow","i","currentValue","newValue","grid","_","index","reverse","transpose","newState","reverseRows","slideLeft","direction","prevState","JSON","stringify","handleMovement","canMove","move","game","document","addEventListener","startButton","querySelector","startMessage","winMessage","loseMessage","gameScore","updateDom","newScore","newStatus","cellValue","getElementById","textContent","className","classList","add","remove","String","start","getState","getScore","getStatus","e","key","moveUp","moveDown","moveRight","moveLeft"],"mappings":"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","file":"main.c9be5e4f.js","sourceRoot":"../src","sourcesContent":["const STATUS_IDLE = 'idle';\nconst STATUS_PLAYING = 'playing';\nconst STATUS_WIN = 'win';\nconst STATUS_LOSE = 'lose';\n\nconst Direction = {\n  UP: 'up',\n  DOWN: 'down',\n  LEFT: 'left',\n  RIGHT: 'right',\n};\n\nmodule.exports = {\n  STATUS_IDLE,\n  STATUS_PLAYING,\n  STATUS_WIN,\n  STATUS_LOSE,\n  Direction,\n};\n","'use strict';\n\nconst {\n  STATUS_IDLE,\n  STATUS_PLAYING,\n  STATUS_WIN,\n  STATUS_LOSE,\n  Direction,\n} = require('./constants');\n\nclass Game {\n  constructor(initialState = null) {\n    this.initialState = initialState || this.createEmptyBoard();\n    this.state = this.initialState;\n    this.score = 0;\n    this.status = STATUS_IDLE;\n  }\n\n  createEmptyBoard() {\n    return Array.from({ length: 4 }, () => Array(4).fill(0));\n  }\n\n  start() {\n    this.state = this.initialState.map((row) => [...row]);\n    this.status = STATUS_PLAYING;\n    this.score = 0;\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  restart() {\n    this.state = this.initialState.map((row) => [...row]);\n    this.status = STATUS_IDLE;\n    this.score = 0;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    this.state.forEach((r, rowIndex) => {\n      r.forEach((c, colIndex) => {\n        if (c === 0) {\n          emptyCells.push({ row: rowIndex, col: colIndex });\n        }\n      });\n    });\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const { row, col } = emptyCells[randomIndex];\n\n    const newTileValue = Math.random() < 0.9 ? 2 : 4;\n\n    this.state[row][col] = newTileValue;\n  }\n\n  slideLeft(row) {\n    const nonZeroRow = row.filter((cell) => cell !== 0);\n    const mergedRow = [];\n\n    for (let i = 0; i < nonZeroRow.length; i++) {\n      const currentValue = nonZeroRow[i];\n\n      if (i < nonZeroRow.length - 1 && nonZeroRow[i] === nonZeroRow[i + 1]) {\n        const newValue = currentValue * 2;\n\n        if (newValue === 2048) {\n          this.status = STATUS_WIN;\n        }\n\n        mergedRow.push(newValue);\n        nonZeroRow[i + 1] = 0;\n        i++;\n        this.score += newValue;\n      } else {\n        mergedRow.push(currentValue);\n      }\n    }\n\n    return [...mergedRow, ...Array(row.length - mergedRow.length).fill(0)];\n  }\n\n  canMove() {\n    for (let r = 0; r < this.state.length; r++) {\n      for (let c = 0; c < this.state[r].length; c++) {\n        if (this.state[r][c] === 0) {\n          return true;\n        }\n\n        if (\n          (c < this.state[r].length - 1 &&\n            this.state[r][c] === this.state[r][c + 1]) ||\n          (r < this.state.length - 1 &&\n            this.state[r][c] === this.state[r + 1][c])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  transpose(grid) {\n    return grid[0].map((_, index) => grid.map((row) => row[index]));\n  }\n\n  reverseRows(grid) {\n    return grid.map((row) => row.reverse());\n  }\n\n  handleMovement(transpose, reverse) {\n    let newState = this.state.map((row) => [...row]);\n\n    if (transpose) {\n      newState = this.transpose(newState);\n    }\n\n    if (reverse) {\n      newState = this.reverseRows(newState);\n    }\n\n    newState = newState.map((row) => this.slideLeft(row));\n\n    if (reverse) {\n      newState = this.reverseRows(newState);\n    }\n\n    if (transpose) {\n      newState = this.transpose(newState);\n    }\n\n    return newState;\n  }\n\n  move(direction) {\n    if (this.status !== STATUS_PLAYING) {\n      return;\n    }\n\n    const prevState = JSON.stringify(this.state);\n\n    switch (direction) {\n      case Direction.UP:\n        this.state = this.handleMovement(true, false);\n        break;\n      case Direction.DOWN:\n        this.state = this.handleMovement(true, true);\n        break;\n      case Direction.LEFT:\n        this.state = this.handleMovement(false, false);\n        break;\n      case Direction.RIGHT:\n        this.state = this.handleMovement(false, true);\n        break;\n    }\n\n    if (prevState !== JSON.stringify(this.state)) {\n      this.addRandomTile();\n    }\n\n    if (!this.canMove()) {\n      this.status = STATUS_LOSE;\n    }\n  }\n\n  moveLeft() {\n    this.move(Direction.LEFT);\n  }\n\n  moveRight() {\n    this.move(Direction.RIGHT);\n  }\n\n  moveUp() {\n    this.move(Direction.UP);\n  }\n\n  moveDown() {\n    this.move(Direction.DOWN);\n  }\n}\n\nmodule.exports = Game;\n","'use strict';\n\nconst {\n  STATUS_WIN,\n  STATUS_LOSE,\n  STATUS_PLAYING,\n} = require('../modules/constants');\n\nconst Game = require('../modules/Game.class');\n\nconst game = new Game();\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const startButton = document.querySelector('.button.start');\n  const startMessage = document.querySelector('.message-start');\n  const winMessage = document.querySelector('.message-win');\n  const loseMessage = document.querySelector('.message-lose');\n  const gameScore = document.querySelector('.game-score');\n\n  function updateDom(newState, newScore, newStatus) {\n    newState.forEach((row, rowIndex) => {\n      row.forEach((cellValue, colIndex) => {\n        const cell = document.getElementById(`cell-${rowIndex}-${colIndex}`);\n\n        if (cellValue) {\n          cell.textContent = cellValue;\n          cell.className = `field-cell field-cell--${cellValue}`;\n        } else {\n          cell.textContent = '';\n          cell.className = `field-cell`;\n        }\n      });\n\n      if (newStatus === STATUS_PLAYING) {\n        winMessage.classList.add('hidden');\n        loseMessage.classList.add('hidden');\n      }\n\n      if (newStatus === STATUS_WIN) {\n        winMessage.classList.remove('hidden');\n      }\n\n      if (newStatus === STATUS_LOSE) {\n        loseMessage.classList.remove('hidden');\n      }\n    });\n\n    gameScore.textContent = String(newScore);\n  }\n\n  startButton.addEventListener('click', () => {\n    game.start();\n    updateDom(game.getState(), game.getScore(), game.getStatus());\n\n    startButton.textContent = 'Restart';\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n\n    startMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n  });\n\n  document.addEventListener('keydown', (e) => {\n    switch (e.key) {\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n\n      default:\n        break;\n    }\n\n    updateDom(game.getState(), game.getScore(), game.getStatus());\n  });\n});\n"]}